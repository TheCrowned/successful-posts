a:8:{i:0;O:7:"WP_Post":27:{s:2:"ID";i:49186;s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2015-11-14 08:28:48";s:13:"post_date_gmt";s:19:"2015-11-14 07:28:48";s:12:"post_content";s:1366:"Current Pengu-ins made plugins are:
<ul>
	<li><a title="Post Pay Counter: WordPress payment manager" href="http://www.thecrowned.org/wordpress-plugins/post-pay-counter" target="_blank"><strong>Post Pay Counter</strong></a></li>
	<li><a title="Post Pay Counter PRO – Enhance your payment manager" href="http://www.thecrowned.org/post-pay-counter-pro" target="_blank"><strong>Post Pay Counter PRO</strong></a></li>
	<li><strong><a href="http://www.thecrowned.org/facebook-pay-per-social-interactions-shares-likes-and-comments" target="_blank">Facebook</a></strong></li>
	<li><a title="Publisher bonus: an editor rewarding system" href="http://www.thecrowned.org/publisher-bonus-editor-rewarding-system" target="_blank"><strong>Publisher bonus</strong></a></li>
	<li><strong><a href="http://www.thecrowned.org/stop-words-exclude-certain-words" target="_blank">Stopwords</a></strong></li>
	<li><a title="Posts To Do List: share and keep track of writing ideas" href="http://www.thecrowned.org/wordpress-plugins/posts-to-do-list" target="_blank"><strong>Posts To Do List</strong></a></li>
	<li><strong><a href="http://www.thecrowned.org/smart-tag-insert" target="_blank">Smart Tag Insert</a></strong></li>
	<li><strong><a title="Rel Nofollow" href="http://www.thecrowned.org/wordpress-plugins/rel-nofollow" target="_blank">Rel Nofollow</a></strong></li>
</ul>";s:10:"post_title";s:17:"WordPress plugins";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:6:"closed";s:11:"ping_status";s:6:"closed";s:13:"post_password";s:0:"";s:9:"post_name";s:19:"wordpress-plugins-2";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2015-11-14 08:28:48";s:17:"post_modified_gmt";s:19:"2015-11-14 07:28:48";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";i:0;s:4:"guid";s:40:"http://www.thecrowned.org/?page_id=49186";s:10:"menu_order";i:0;s:9:"post_type";s:4:"page";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"0";s:6:"filter";s:3:"raw";s:10:"sp_metrics";a:2:{i:0;i:16;i:1;d:0;}s:9:"post_tags";a:0:{}s:15:"post_categories";a:0:{}}i:1;O:7:"WP_Post":27:{s:2:"ID";i:46184;s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2015-09-14 12:33:44";s:13:"post_date_gmt";s:19:"2015-09-14 10:33:44";s:12:"post_content";s:1095:"<a href="http://www.thecrowned.org/wp-content/uploads/2015/09/banner-772x250.png"><img class="aligncenter size-full wp-image-46185" src="http://www.thecrowned.org/wp-content/uploads/2015/09/banner-772x250.png" alt="banner-772x250" width="772" height="250" data-wp-pid="46185" /></a>
<blockquote>Automatically adds most relevant tags to posts selecting them from an admin-defined list.</blockquote>
Once you have defined a list of tags, this plugin will add a box in the post editing page through which look for relevant tags basing on the post content. The most relevant will automatically be selected (although the selection can be changed), and selected tags can be added to the post with a click.

<!--more-->

It is also possible to use the plugin to reassign all blog's posts tags through a handy posts tags rebuilder
<h1><a href="https://downloads.wordpress.org/plugin/smart-tag-insert.1.0.zip"><strong>Download (free) Smart Tag Insert</strong></a></h1>
<h1></h1>
<h1><strong>Smart Tag Insert Screenshots (clic to enlarge):</strong></h1>
[gallery link="file" ids="46187,46186"]";s:10:"post_title";s:51:"Smart Tag Insert: automatic WordPress posts tagging";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:6:"closed";s:11:"ping_status";s:6:"closed";s:13:"post_password";s:0:"";s:9:"post_name";s:16:"smart-tag-insert";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2015-11-14 08:15:42";s:17:"post_modified_gmt";s:19:"2015-11-14 07:15:42";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";i:0;s:4:"guid";s:40:"http://www.thecrowned.org/?page_id=46184";s:10:"menu_order";i:0;s:9:"post_type";s:4:"page";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"0";s:6:"filter";s:3:"raw";s:10:"sp_metrics";a:2:{i:0;i:1;i:1;d:0;}s:9:"post_tags";a:1:{i:0;s:16:"wordpress plugin";}s:15:"post_categories";a:0:{}}i:2;O:7:"WP_Post":27:{s:2:"ID";i:881;s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2014-03-26 00:45:45";s:13:"post_date_gmt";s:19:"2014-03-25 22:45:45";s:12:"post_content";s:0:"";s:10:"post_title";s:12:"Rel Nofollow";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:12:"rel-nofollow";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2015-11-14 08:13:04";s:17:"post_modified_gmt";s:19:"2015-11-14 07:13:04";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";i:498;s:4:"guid";s:38:"http://www.thecrowned.org/?page_id=881";s:10:"menu_order";i:0;s:9:"post_type";s:4:"page";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"2";s:6:"filter";s:3:"raw";s:10:"sp_metrics";a:2:{i:0;i:4;i:1;d:0;}s:9:"post_tags";a:1:{i:0;s:16:"wordpress plugin";}s:15:"post_categories";a:0:{}}i:3;O:7:"WP_Post":27:{s:2:"ID";i:504;s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2014-01-23 09:59:08";s:13:"post_date_gmt";s:19:"2014-01-23 07:59:08";s:12:"post_content";s:0:"";s:10:"post_title";s:55:"Posts To Do List: share and keep track of writing ideas";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:16:"posts-to-do-list";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2015-11-14 08:18:12";s:17:"post_modified_gmt";s:19:"2015-11-14 07:18:12";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";i:498;s:4:"guid";s:38:"http://www.thecrowned.org/?page_id=504";s:10:"menu_order";i:0;s:9:"post_type";s:4:"page";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"2";s:6:"filter";s:3:"raw";s:10:"sp_metrics";a:2:{i:0;i:8;i:1;d:0;}s:9:"post_tags";a:1:{i:0;s:16:"wordpress plugin";}s:15:"post_categories";a:0:{}}i:4;O:7:"WP_Post":27:{s:2:"ID";i:331;s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2013-02-20 14:42:51";s:13:"post_date_gmt";s:19:"2013-02-20 12:42:51";s:12:"post_content";s:17410:"There are two things I am currently working on:
<ol>
 	<li>School</li>
 	<li>Integrating my <a title="Post Pay Counter PRO – The final WordPress payment manager" href="http://www.thecrowned.org/post-pay-counter-pro" target="_blank">Post Pay Counter</a> Wordpress plugin with PayPal, so that site administrators can pay their writers directly from their blog pages, without having to head to the PayPal website</li>
</ol>
Apparently, it turns out that you do not get to choose how much time you want to dedicate to the first point. That, matched with the fact that PayPal APIs are horrible and that the documentation is often useless, is making the whole process much longer than I thought. Meanwhile, I am sharing what I have come up with until now (which works pretty well, actually), scheduling a second part of the tutorial for when the job will be completed.
<h1>PayPal Adaptive Payments: what it is for</h1>
<blockquote>Adaptive payments handles payments between a <em>sender</em> of a payment and one or more <em>receivers</em> of the payment. You are an <em>application owner</em>, such as a merchant that owns a website, the owner of a widget on a social networking site, the provider of a payment application on mobile phones, and so on. Your application is the caller of Adaptive Payments API operations.</blockquote>
Standing to what I have been able to discover about PayPal's different payment mechanisms over summer, Adaptive Payments represents the <strong>most flexible way</strong> to transfer funds from one account to another. Also, it seems the only method you can effectively integrate PayPal in your application. Adaptive Payments is in fact for those applications in which your account, as application developer, is not the one you are drawing funds from. <strong>Shortly, you need to move money on behalf of someone, and your application is the intermediary</strong>.

<a href="http://www.thecrowned.org/wp-content/uploads/2012/10/AdapPymntRolesApp_B.gif"><img class="aligncenter size-full wp-image-334" title="AdapPymntRolesApp_B" src="http://www.thecrowned.org/wp-content/uploads/2012/10/AdapPymntRolesApp_B.gif" alt="" width="523" height="257" /></a>

In my specific case, I needed a way to let administrators put their credentials into my plugin and have PayPal let me get money from their accounts and transfer it to their writers' ones. Adaptive Payments method was really suitable because <strong>it allows six transactions per each request</strong>, so that it is possible to send different amounts to several people with only one API request. As bottom line (which I did not need and did not care to dive into), it also allows <em>Chained Payments</em>, in which the primary receiver passes part of the payment to other receivers, splitting the original amount.

<!--more-->

We are almost beginning. Just let me give you the link to the complete, detailed, give-a-lot-for-granted <a title="Adaptive Payments documentation" href="https://cms.paypal.com/us/cgi-bin/?cmd=_render-content&amp;content_ID=developer/e_howto_api_APIntro" target="_blank">PayPal official documentation</a>. There is also a brilliant PHP class I have used (and that will be used in this tutorial) which is <a title="Angell EYE's PayPal Payments Pro PHP Class" href="http://www.angelleye.com/paypal-payments-pro-php-class/" target="_blank">Angell EYE's PayPal Payments Pro PHP Class</a>. Apart from Adaptive Payments, you can execute almost any API-related PHP task with that class.
<h1>Application Workflow</h1>
This is how the PayPal-related part of the application will work:
<ol>
 	<li>A form will contain all the data we need to complete the transaction (i.e. amount(s) and receiver(s) address).</li>
 	<li>The transaction must then be prepared. When the submit button of the form is clicked, Javascript collects all the data and an AJAX request is issued to a PHP background page that takes them in and arranges the PayPal API request. <strong>PayPal will return a Pay Key</strong>, that our PHP page will return as result of the AJAX results. At this point we are still on the first page, nothing seems to have happened.</li>
 	<li>Having the PayPal Pay Key makes it possible to execute the transaction, finally. Thus, the user is shown the PayPal forms and confirmation stuff that let them complete the payment.</li>
</ol>
<a href="http://www.thecrowned.org/wp-content/uploads/2012/10/AdapPymntSrvcFlow_A.gif"><img class="aligncenter size-full wp-image-349" title="AdapPymntSrvcFlow_A" src="http://www.thecrowned.org/wp-content/uploads/2012/10/AdapPymntSrvcFlow_A.gif" alt="" width="526" height="507" /></a>
<h1>Getting started with Adaptive Payments: the front-end</h1>
The first thing we are going to set up is the front end. There are two ways you can have it:
<ol>
 	<li><strong>In a new window</strong>. This is the simplest method, which you will get to work pretty easily. When the user clicks to execute the payment, a new window/tab is opened where the transaction is completed. User are then momentarily forced to leave your website, to which they will be automatically redirected when the payment is done.</li>
 	<li><strong>In a lightboxed iframe</strong>. Although this is a bit harder, it will make the user experience a lot better. Users never leave your website: the transaction happens on top of your page, while the content gets dark. This is what this tutorial walks you through.</li>
</ol>
First of all, we need two forms, either having its own submit button:
<div>
<pre class="lang:default decode:true ">&lt;form id="prepare_payment_form" action="#" method="post"&gt;
   &lt;input id="prepare_payment" name="prepare_payment" type="submit" value="Prepare payment with PayPal" /&gt;
&lt;/form&gt;
&lt;form id="execute_payment_form" action="#" method="post" target="PPDGFrame"&gt;
   &lt;input id="execute_payment" disabled="disabled" name="execute_payment" type="submit" value="Execute payment with PayPal" /&gt;
&lt;/form&gt;</pre>
</div>
<div>Note the <em>target="PPDGFrame"</em> for the second form. The <em>execute_payment</em> submit button is disabled because we do not want users to execute the payment before they have actually prepared it. I have the preparation handled by AJAX, so that no reload is needed. I guess that if you are smart and masochist enough to be willing to deal with PayPal APIs and read this tutorial, you will also know how to Javascript-enable the execute_payment button and the like stuff (I am lazy enough not to provide you with that code, sorry).</div>
You may also want to add somewhere a space for errors to be displayed, that will be invisible until some error comes up:
<div id="paypal_error" style="display: none;"></div>
The first form, apart from its submit button, will also contain the data needed to fulfill the PayPal request. I am really keeping this simple, putting two email addresses and two amounts directly as form data, but you can fetch your data the way you need (e.g. store in the form only the user ID and then pulling from some database the other data when the request will be prepared by PHP).
<pre class="lang:default decode:true">&lt;form id="prepare_payment_form" action="#" method="post"&gt;
   &lt;input name="payment_1" type="text" value="50" /&gt; 
   &lt;input name="user_address_1" type="text" value="my_first_address@domain.com" /&gt;
   &lt;input name="payment_2" type="text" value="25" /&gt; 
   &lt;input name="user_address_2" type="text" value="my_second_address@domain.com" /&gt;
   &lt;input id="prepare_payment" name="prepare_payment" type="submit" value="Prepare payment with PayPal" /&gt;
&lt;/form&gt;</pre>
Now, when the form is submitted, we will need to grab those data and send them to a secondary PHP page that will handle the whole thing.
<pre class="lang:default decode:true">&lt;script type="text/javascript"&gt;// &lt;![CDATA[
jQuery(document).ready(function($) {
   $(“#prepare_payment”).unbind(‘click’).click(function(e) {
   e.preventDefault();</pre>
So, from Javascript to English, when the <em>prepare_payment</em> button is clicked (row 3), the default action is prevented, so that the form is not sent and we allow AJAX to take over (row 4). As for the unbinding and subsequent binding, I have no clue why this happens, but it prevents the event from firing multiple times.
<pre class="">var data = {
   action: ‘the_php_page_that_will_handle_the_request.php’,
   payment_data: $(‘#prepare_payment_form’).serialize()
};
</pre>
Quite easy: preparing the AJAX request data, which is actually simply a serialization of the form data. If you need more stuff, you can add more indexes to the array. You may also want to add a confirmation step, which is what I did:
<pre>var agree = confirm(‘You are just about to ask the Post Pay Counter to prepare a PayPal payment on your behalf. Note that this will really take money from your account and into the selected writers ones\’. Please double check what you are doing, it is only your fault if something goes wrong.\n\nIf what you have done is fine, then you can go on with the payment. Just be patient during loading, please. In a couple of seconds the execute payment button will be clickable and you will be able to confirm this action. From this moment on you can not modify the payment selection, but if you reload the page before clicking the execute payment button, nothing will be done.’);

if (!agree)
return false;
</pre>
From the moment the payment is being prepared on the related button can not be clicked anymore. Moreover, to prevent changes to the form, all the text inputs are disabled:
<pre>$(‘#prepare_payment’).attr(“disabled”, “true”);
jQuery(“#prepare_payment_form :text”).each(function() {
   jQuery(this).attr(“disabled”, “true”);
});
</pre>
Then we finally fire the AJAX request to get the Pay Key:
<pre>$.post(ajaxurl, data, function(response) {

   if(response.indexOf(“Error: “) != -1) {
      $(“#paypal_error”).css(“display”, “block”);
      $(“#paypal_error”).html(response);
      $(‘#prepare_payment’).removeAttr(“disabled”);
      jQuery(“#prepare_payment_form :text”).each(function() {
         jQuery(this).removeAttr(“disabled”);
      });
      return false;
   }

   //Initialize PayPal embedded payment flow. Not loading it on document ready so that we only have it if user prepares payment, not just loads the page…
   var dgFlow = new PAYPAL.apps.DGFlow({trigger: ‘execute_payment’});

   //Store PayKey in the form action and enable execute payment button
   $(“#execute_payment_form”).attr(“action”, “https://www.sandbox.paypal.com/webapps/adaptivepayment/flow/pay?expType=light&amp;payKey=” + response);
   $(‘#execute_payment’).removeAttr(“disabled”);
});
</pre>
Inside the AJAX request, the first block is for error handling: if something bad happens the form button and inputs are clickable and editable again and the error is shown in the proper div.

If the request is successful, The PayPal flow is initialized, using as trigger parameter the HTML ID of the submit button of the second form, the execute_payment one.
Finally, the action of the execute payment form is updated with the PayPal URL and the Pay Key received as results of the AJAX request, and the submit button is enabled, so that the payment can be executed. (When that will happen, PayPal libraries will take over and do the job).

There is one more thing to add to the document.ready of the page:
<pre>jQuery(document).ready(function($) {
   if (window != top) {
      top.location.replace(document.location);
   }
</pre>
This will ensure that when/if the transaction is over, either because the user canceled it or because it was complete, the iframe gets closed automatically. I have not found a better way to handle this, so if you Javascript guys have some better ways, I do really long to get rid of that crappy redirect.
<h1>Getting started with PayPal Adaptive Payments: the back-end</h1>
That was the front-end. Not let's focus on the PHP page to which the AJAX request is issued.
<pre class="lang:default decode:true">&lt;?php
include( 'angell_eye_class_dir/Pay.php' );

//Payment data is passed via AJAX serialized. We explode them by &amp; (dividing fields from each other) and then for each of them we explode again, this time by = (separating fields names and fields values). I know it looks awful, but it is not that hard...
$receivers          = array();
$payment_data       = array();
$payment_data_temp  = explode( '&amp;', $_POST['payment_data'] );
        
foreach( $payment_data_temp as $single ) {
   $yet_another_temp   = explode( '=', $single );
   $userid             = substr( $yet_another_temp[0], -1 );
            
   $receivers[] = array(
      'Amount'           =&gt; $single['payment'.$userid], 					  // Required.  Amount to be paid to the receiver.
      'Email'            =&gt; $single['user_address'.$userid], 					  // Receiver's email address. 127 char max.
      'InvoiceID'        =&gt; '', 								  // The invoice number for the payment.  127 char max.
      'PaymentType'      =&gt; 'PERSONAL', 							  // Transaction type.  Values are:  GOODS, SERVICE, PERSONAL, CASHADVANCE, DIGITALGOODS
      'PaymentSubType'   =&gt; '', 								  // The transaction subtype for the payment.
      'Phone'            =&gt; array('CountryCode' =&gt; '', 'PhoneNumber' =&gt; '', 'Extension' =&gt; ''),   // Receiver's phone number.   Numbers only.
      'Primary'          =&gt; ''								          // Whether this receiver is the primary receiver.  Values are boolean:  TRUE, FALSE
   );
}

$paypal_result = execute_payment( TRUE, $paypal_API_email, $paypal_API_password, $paypal_API_signature, $paypal_currency_code, 'SENDER', $receivers, $_POST['current_page'] );
        
if( $paypal_result['Ack'] == 'Failure' )
   die( 'Error: '.$paypal_result['Errors'][0]['Message'] );

die($paypal_result['PayKey']);
?&gt;</pre>
An array containing all the payment receivers (up to 6) is created, required fields are only <em>Amount</em>, <em>Email</em> and <em>PaymentType</em>. At this point, the only thing missing is the execute_payment function, which has the following parameters:
<ul>
 	<li>Whether you want to work in the PayPal sandbox for testing (TRUE) or not (FALSE);</li>
 	<li>The PayPal API email address of the account <strong>you are drawing funds from</strong>. For example, in my plugin it is the PayPal API email of the blog administrator;</li>
 	<li>The PayPal API password of the account you are drawing funds from;</li>
 	<li>The PayPal API signature of the account you are drawing funds from;</li>
 	<li>The code for the currency you want to use for payments, as <em>EUR, USD, GBP</em>...</li>
 	<li>Who will pay for PayPal fees, <em>SENDER</em> or <em>RECEIVER</em>;</li>
 	<li>The page you want the user to be redirected when the Adaptive Payment will be done (or canceled).</li>
</ul>
That function consists in a customized version of the Angel EYE's class Pay.php file as follows (I am stripping it of all the inline comments):
<pre class="lang:default decode:true ">&lt;?php 
include_once('paypal.class.php'); 

function execute_payment( $sandbox, $api_username, $api_password, $api_signature, $currency, $fees_payer, $receivers, $return_page ) { 

// Create PayPal object. 
$PayPalConfig = array( 
   'Sandbox' =&gt; $sandbox, 
   'DeveloperAccountEmail' =&gt; '', 
   'ApplicationID' =&gt; 
   'APP-80W284485P519543T', 
   'DeviceID' =&gt; '', 
   'IPAddress' =&gt; $_SERVER['REMOTE_ADDR'], 
   'APIUsername' =&gt; $api_username, 
   'APIPassword' =&gt; $api_password, 
   'APISignature' =&gt; $api_signature, 
   'APISubject' =&gt; '' 
); 

$PayPal = new PayPal_Adaptive($PayPalConfig); 

// Prepare request arrays 
$PayRequestFields = array( 
   'ActionType' =&gt; 'CREATE', 
   'CancelURL' =&gt; $return_page, 
   'CurrencyCode' =&gt; $currency, 
   'FeesPayer' =&gt; $fees_payer, 
   'IPNNotificationURL' =&gt; '', 
   'Memo' =&gt; '', 
   'Pin' =&gt; '', 
   'PreapprovalKey' =&gt; '', 
   'ReturnURL' =&gt; $current_page, 
   'ReverseAllParallelPaymentsOnError' =&gt; '', 
   'SenderEmail' =&gt; '', 
   'TrackingID' =&gt; '' 
); 

$ClientDetailsFields = array( 
   'CustomerID' =&gt; '', 
   'CustomerType' =&gt; '', 
   'GeoLocation' =&gt; '', 
   'Model' =&gt; '', 
   'PartnerName' =&gt; 'Always Give Back' 
); 

$FundingTypes = array('ECHECK', 'BALANCE', 'CREDITCARD'); 
$SenderIdentifierFields = array( 'UseCredentials' =&gt; '' ); 
$AccountIdentifierFields = array( 
   'Email' =&gt; '', 
   'Phone' =&gt; array('CountryCode' =&gt; '', 'PhoneNumber' =&gt; '', 'Extension' =&gt; '') 
); 

$PayPalRequestData = array( 'PayRequestFields' =&gt; $PayRequestFields, 'ClientDetailsFields' =&gt; $ClientDetailsFields, 'FundingTypes' =&gt; $FundingTypes, 'Receivers' =&gt; $receivers, 'SenderIdentifierFields' =&gt; $SenderIdentifierFields, 'AccountIdentifierFields' =&gt; $AccountIdentifierFields ); 
$PayPalResult = $PayPal-&gt;Pay($PayPalRequestData); 

return $PayPalResult; 
} 
?&gt;
</pre>
It will probably need some tweaking on your part, but I have hopefully explained how the hell PayPal Adaptive Payments are supposed to work!";s:10:"post_title";s:67:"Tutorial: Use PayPal Adaptive Payments API (with Embedded Lightbox)";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:46:"tutorial-paypal-adaptive-payments-api-embedded";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2016-12-07 18:12:06";s:17:"post_modified_gmt";s:19:"2016-12-07 17:12:06";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";i:0;s:4:"guid";s:32:"http://www.thecrowned.org/?p=331";s:10:"menu_order";i:0;s:9:"post_type";s:4:"post";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:2:"26";s:6:"filter";s:3:"raw";s:10:"sp_metrics";a:2:{i:0;i:699;i:1;d:0;}s:9:"post_tags";a:5:{i:0;s:3:"api";i:1;s:6:"coding";i:2;s:8:"internet";i:3;s:6:"paypal";i:4;s:3:"php";}s:15:"post_categories";a:3:{i:0;s:3:"php";i:1;s:3:"php";i:2;s:3:"php";}}i:5;O:7:"WP_Post":27:{s:2:"ID";i:319;s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2012-09-10 17:47:46";s:13:"post_date_gmt";s:19:"2012-09-10 15:47:46";s:12:"post_content";s:2209:"I worked for several blogs and websites. In most of them, we often felt the need to share hints and ideas about future posts, about what each of us stumbled upon while surfing. Unfortunately, there was not a great way to fulfill that need, and we often told each other via email, or emailed the admin who would in turn forward to all the writers. That is the reason why I wanted to build a Wordpress tool that could simplify this sharing process.

<strong>That Wordpress tool is a plugin and is called Posts To Do List. </strong>

<!--more-->

<strong>By a convenient box in the posts editing page, everyone will be able to share the posts they think are worth writing</strong>. You have this little box, where you put the URL of the page where you read that great post, and the plugin will fetch the title by itself. You will then be able to change the retrieved title, suggest a keyword and add other notes, set a priority and assign the post to some user of the blog. And if you want to leave everything blank but the title field, leaving a suggestion that anyone can catch and deepen... well, you can!

You, as the administrator, want everything in the power of your hands? No problem, you can decide what user roles can add new posts to the to do list and what user roles can delete already added items. You want your users to stick to the post you assigned to them? You can hide the posts you have assigned to other users from their view. From a simple stats page it will be immediately clear how many posts you have already assigned and how many of them are still to do, so that it will be easy to understand how much your writers have done and how many posts you have still to assign. Almost every action is powered by AJAX, so that no page reloads are needed and you do not even notice it is happening, it just works. What do you want more? Cause we even have cookies!
<h1 style="text-align: center;"><a title="Posts To Do List" href="http://wordpress.org/extend/plugins/posts-to-do-list/" target="_blank">Download Posts To Do List</a></h1>
<p style="text-align: center;"><strong>Post Pay Counter Screenshots (clic to enlarge):</strong></p>
[gallery link="file" ids="325,323,324,322,321"]";s:10:"post_title";s:45:"Posts To-Do List: keep track of writing ideas";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:33:"wordpress-plugin-posts-to-do-list";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2016-12-08 19:08:49";s:17:"post_modified_gmt";s:19:"2016-12-08 18:08:49";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";i:0;s:4:"guid";s:32:"http://www.thecrowned.org/?p=319";s:10:"menu_order";i:0;s:9:"post_type";s:4:"post";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:2:"30";s:6:"filter";s:3:"raw";s:10:"sp_metrics";a:2:{i:0;i:5;i:1;d:0;}s:9:"post_tags";a:2:{i:0;s:3:"php";i:1;s:9:"wordpress";}s:15:"post_categories";a:2:{i:0;s:9:"wordpress";i:1;s:9:"wordpress";}}i:6;O:7:"WP_Post":27:{s:2:"ID";i:168;s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2012-04-03 08:00:39";s:13:"post_date_gmt";s:19:"2012-04-03 07:00:39";s:12:"post_content";s:3807:"As you may know, I am the happy developer of a Wordpress plugin called <a href="http://www.thecrowned.org/post-pay-counter" target="_blank">Post Pay Counter</a>. I dare say that that has been my first serious coding project, well thought and well written. It taught me a lot, above all the concept that when you start a new project, you should think as if it was going to become a huge one. This is what I'd like to share with you today.

When I started developing the Post Pay Counter project it was two years ago. I took it up because a friend of mine needed it, and asked me if I could set up a plugin that could simplify writers payments. That was how the project started. Looking back at that time, I can clearly identify an error that came along with me and, partly, is still with me today: the idea that was not going to be an important plugin, that I would not have edited it much after, that I would not have added almost anything... that so it was, so it would have remained. What did this practically mean?

<!--more-->

Well, first, it meant that I had chosen a way to save options that was not convenient at all. I had very few settings to store and I went for an option in the database, using two different separators to distinguish them. It was quite resource-cheap, but when it came to coding, it was a mess. My files were filled up with nested explode() functions and I was driven mad to remember which array I should use and which index.

Second, as a result, my whole code (although it was only half a thousand lines long overall) was just like a puzzle. Few functions, badly organized and slowly working. I was scared that the puzzle could break for every more piece I added. The problem was that when I designed it, I did not thought of adding stuff later, I just regarded it as done at the first release. So, basically, when I wanted to implement a new feature, I did not know how and where to put it simply because I was not supposed to do it!

Third, I was so eager to finish it, that I did not even stop to think about the name. The very first release of the plugin, in fact, held a different name than the current one: Monthly Post Counter. I am sure I made other mistakes more, but I think these were the major ones.

<img class="aligncenter size-full wp-image-289" title="schulz-charles-peanuts-think-big" src="http://www.thecrowned.org/wp-content/uploads/2011/10/schulz-charles-peanuts-think-big.jpg" alt="" width="358" height="450" />

The consequence of this all, is that after a year, when I had a whole summer in front of me, I decided that, if I were to keep updating the plugin and keep adding new features, I had to rewrite it from scratch. And so I did. But this time with a brand new idea in my head: this is going to become something big, I cannot predict what I am going to do with it nor whether I will keep adding stuff in a year or two, so let's do things well since the beginning.

And so I started, again. I did not touch the computer in the first place, instead I reached for some paper. It was a week of thought and notes, no coding. And then there was the real, concrete start: there were classes, and methods, and performance, and speed, and graphics. I got rid of that horrible wp_option value and built a new independent table to store my data.

I committed just one more mistake: the names I chose for my MySQL fields were stupid and my whole table was not thought to welcome almost sixty fields, as they are in the current release indeed. But I did not need to work too much to make that work as I wanted, since everything else was working fine...

I acknowledge what I have written is more like the diary of a plugin developer, but the message is "this what happens when you do not think big, so do think big since the beginning!".";s:10:"post_title";s:40:"When you start a new project, think big!";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:38:"when-you-start-a-new-project-think-big";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2012-04-29 11:40:01";s:17:"post_modified_gmt";s:19:"2012-04-29 10:40:01";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";i:0;s:4:"guid";s:64:"http://www.thecrowned.org/when-you-start-a-new-project-think-big";s:10:"menu_order";i:0;s:9:"post_type";s:4:"post";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"2";s:6:"filter";s:3:"raw";s:10:"sp_metrics";a:2:{i:0;i:1;i:1;d:0;}s:9:"post_tags";a:0:{}s:15:"post_categories";a:3:{i:0;s:9:"wordpress";i:1;s:9:"wordpress";i:2;s:9:"wordpress";}}i:7;O:7:"WP_Post":27:{s:2:"ID";i:210;s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2011-11-18 18:57:54";s:13:"post_date_gmt";s:19:"2011-11-18 16:57:54";s:12:"post_content";s:1002:"I have been unable to watch YouTube videos for a couple of months. There were some people on the Google Forums reporting the same problem, also posting screenshots, but no one seemed to be able to fix it.

Finally, checking with despair my Chrome Dev Tools, I found the problem! In my rush to block ads and avoid the slowing down produced by all the requests to external domains, I ended up redirecting <em>s.ytimg.com</em> to my own PC. Sadly, it seems YouTube is taking some CSSes and other stuff from there, reason why I was unable to watch any video and load the home page with a decent view.

<!--more-->

<a href="http://www.thecrowned.org/wp-content/uploads/2011/11/Immagine.png"><img class="aligncenter size-full wp-image-211" title="Immagine" src="http://www.thecrowned.org/wp-content/uploads/2011/11/Immagine.png" alt="" width="442" height="113" /></a>

Simply get rid of that row in your hosts file (or wherever you may have blocked it), save, and you are done!

Simpler than this!";s:10:"post_title";s:49:"When YouTube pages load with no CSS: how to solve";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:43:"youtube-pages-load-with-no-css-how-to-solve";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2017-08-26 08:50:16";s:17:"post_modified_gmt";s:19:"2017-08-26 07:50:16";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";i:0;s:4:"guid";s:32:"http://www.thecrowned.org/?p=210";s:10:"menu_order";i:0;s:9:"post_type";s:4:"post";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:2:"10";s:6:"filter";s:3:"raw";s:10:"sp_metrics";a:2:{i:0;i:705;i:1;d:0;}s:9:"post_tags";a:2:{i:0;s:4:"tips";i:1;s:7:"youtube";}s:15:"post_categories";a:1:{i:0;s:7:"youtube";}}}